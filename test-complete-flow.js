// Prueba completa del flujo de compra sin registro
// Ejecutar con: node test-complete-flow.js

import fetch from 'node-fetch'

// Configuraci√≥n de prueba
const TEST_CONFIG = {
  email: 'aleurca@gmail.com',
  name: 'Alejandro Urcelay',
  phone: '+56912345678',
  bookTitle: 'Ebook de la Publicidad',
  bookPrice: 0.50, // 500 CLP
  bookId: 'ebook-publicidad-123'
}

async function pruebaFlujoCompleto() {
  console.log('üõí === PRUEBA COMPLETA DEL FLUJO DE COMPRA ===')
  console.log('üìÖ Fecha y hora:', new Date().toLocaleString('es-CL'))
  console.log('')
  
  console.log('üìä Datos de la prueba:')
  console.log('   - Email:', TEST_CONFIG.email)
  console.log('   - Nombre:', TEST_CONFIG.name)
  console.log('   - Tel√©fono:', TEST_CONFIG.phone)
  console.log('   - Libro:', TEST_CONFIG.bookTitle)
  console.log('   - Precio:', TEST_CONFIG.bookPrice, 'USD (500 CLP)')
  console.log('')

  try {
    // Paso 1: Crear compra de invitado
    console.log('üìù Paso 1: Creando compra de invitado...')
    
    const guestData = {
      email: TEST_CONFIG.email,
      name: TEST_CONFIG.name,
      phone: TEST_CONFIG.phone,
      paymentMethod: 'mercadopago'
    }

    // Simular creaci√≥n de compra de invitado
    const purchaseId = `test-purchase-${Date.now()}`
    const accessPassword = generateSecurePassword()
    
    console.log('   ‚úÖ Compra creada:', purchaseId)
    console.log('   üîë Contrase√±a generada:', accessPassword)
    console.log('')

    // Paso 2: Simular pago exitoso
    console.log('üí≥ Paso 2: Simulando pago exitoso...')
    console.log('   ‚úÖ Pago procesado correctamente')
    console.log('   ‚úÖ Estado: completed')
    console.log('')

    // Paso 3: Enviar credenciales por correo
    console.log('üìß Paso 3: Enviando credenciales por correo...')
    
    const emailData = {
      email: TEST_CONFIG.email,
      name: TEST_CONFIG.name,
      password: accessPassword,
      bookTitle: TEST_CONFIG.bookTitle,
      bookAuthor: 'Autor de Prueba',
      accessUrl: `https://emprendecl.com/leer/${TEST_CONFIG.bookId}`
    }

    console.log('   üì§ Enviando correo a:', emailData.email)
    console.log('   üìñ Libro:', emailData.bookTitle)
    console.log('   üîë Contrase√±a:', emailData.password)
    console.log('   üîó URL:', emailData.accessUrl)
    console.log('')

    // Llamar a la API de env√≠o de correos
    const response = await fetch('https://emprendecl.com/api/send-credentials-email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(emailData),
    })

    const result = await response.json()

    console.log('üìä Respuesta del correo:')
    console.log('   - Status:', response.status)
    console.log('   - Response:', JSON.stringify(result, null, 2))
    console.log('')

    if (response.ok) {
      console.log('üéâ ¬°FLUJO COMPLETO EXITOSO!')
      console.log('‚úÖ Compra de invitado creada')
      console.log('‚úÖ Pago procesado')
      console.log('‚úÖ Credenciales enviadas por correo')
      console.log('')
      console.log('üì± Resumen final:')
      console.log('   - Usuario:', TEST_CONFIG.email)
      console.log('   - Contrase√±a:', accessPassword)
      console.log('   - Libro:', TEST_CONFIG.bookTitle)
      console.log('   - Estado: Completado ‚úÖ')
      console.log('')
      console.log('üìß Revisa tu email:', TEST_CONFIG.email)
      console.log('   - Asunto: üìö Credenciales de acceso -', TEST_CONFIG.bookTitle)
      console.log('   - Contenido: Email HTML profesional con credenciales')
      console.log('   - Incluye: Usuario, contrase√±a, URL, instrucciones')
      console.log('')
      console.log('üîó Para acceder al libro:')
      console.log('   1. Ve a:', emailData.accessUrl)
      console.log('   2. Usa las credenciales del correo')
      console.log('   3. ¬°Disfruta tu lectura!')
    } else {
      console.log('‚ùå ERROR EN EL FLUJO')
      console.log('üîç Detalles del error:', result)
      console.log('')
      console.log('üí° Posibles soluciones:')
      console.log('   - Verificar configuraci√≥n de Resend en Vercel')
      console.log('   - Confirmar que la API est√© desplegada')
      console.log('   - Revisar logs de Vercel')
    }

  } catch (error) {
    console.log('')
    console.log('‚ùå ERROR EN LA PRUEBA')
    console.log('üîç Error:', error.message)
    console.log('')
    console.log('üí° Posibles soluciones:')
    console.log('   - Verificar conexi√≥n a internet')
    console.log('   - Confirmar que la aplicaci√≥n est√© desplegada')
    console.log('   - Revisar la URL de la API')
  }
}

// Funci√≥n para generar contrase√±a segura
function generateSecurePassword() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*'
  let password = ''
  
  // Asegurar al menos una may√∫scula, min√∫scula, n√∫mero y s√≠mbolo
  password += chars[Math.floor(Math.random() * 26)] // May√∫scula
  password += chars[26 + Math.floor(Math.random() * 26)] // Min√∫scula
  password += chars[52 + Math.floor(Math.random() * 10)] // N√∫mero
  password += chars[62 + Math.floor(Math.random() * 8)] // S√≠mbolo
  
  // Completar hasta 12 caracteres
  for (let i = 4; i < 12; i++) {
    password += chars[Math.floor(Math.random() * chars.length)]
  }
  
  // Mezclar la contrase√±a
  return password.split('').sort(() => Math.random() - 0.5).join('')
}

// Ejecutar prueba
pruebaFlujoCompleto()
